CREATE TABLE users (
id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
username TEXT NOT NULL,
hash TEXT NOT NULL
permission INTEGER DEFAULT 4 NOT NULL,
active BLOB DEFAULT 0 NOT NULL
);

CREATE UNIQUE INDEX username ON users (username);



CREATE TABLE links (
id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
type TEXT NOT NULL,
name TEXT NOT NULL,
link TEXT NOT NULL
active BLOB DEFAULT 0 NOT NULL
);

CREATE TABLE logs (
id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
user_id INTEGER NOT NULL,
link_id INTEGER NOT NULL,
type TEXT NOT NULL,
comment TEXT,
time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY(user_id) REFERENCES users(id),
FOREIGN KEY(link_id) REFERENCES links(id)
);


RUNS:
ALTER TABLE users ADD
permission INTEGER DEFAULT 4 NOT NULL;

ALTER TABLE users ADD
activate BLOB DEFAULT 0 NOT NULL;

ALTER TABLE links DROP COLUMN user_id;

ALTER TABLE links ALTER COLUMN user_id TEXT;

ALTER TABLE logs RENAME COLUMN link_ID to link_id;

UPDATE table SET column = value WHERE column = value;

SELECT id FROM links ORDER BY id DESC LIMIT 1;


SELECT users.username, links.name, logs.type, logs.comment, logs.time FROM logs
JOIN users ON logs.user_id = users.id
JOIN links ON logs.link_id = links.id;


UPDATE users SET active = 0 WHERE id = 3;

# eliminar tabela
DROP TABLE logs;


20240924
DROP INDEX username;
ALTER TABLE users ADD COLUMN email TEXT;
UPDATE users SET email = 'default@example.com' WHERE email IS NULL;


ALTER TABLE users RENAME TO users_old;
CREATE TABLE users (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, name TEXT NOT NULL, hash TEXT NOT NULL, permission INTEGER DEFAULT 4 NOT NULL, active BLOB DEFAULT 0 NOT NULL, email TEXT NOT NULL);

INSERT INTO users (id, name, hash, permission, active, email)
SELECT id, username, hash, permission, active, email
FROM users_old;
DROP TABLE users_old;

CREATE UNIQUE INDEX email ON users (email);


CREATE TABLE tickets (
id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
creator TEXT NOT NULL,
subject TEXT NOT NULL,
problem TEXT,
status INTEGER DEFAULT 0 NOT NULL,
priority INTEGER DEFAULT 0 NOT NULL,
time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
solution INTEGER,
FOREIGN KEY(solution) REFERENCES solutions(id)
);

CREATE TABLE solutions (
id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
creator TEXT NOT NULL,
solution TEXT,
time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE tickets RENAME TO tickets_old;



INSERT INTO tickets (id, creator, subject, problem, status, priority, time)
SELECT id, creator, subject, problem, status, priority, time
FROM tickets_old;


UPDATE tickets SET status = 0 WHERE id = 1;
UPDATE tickets SET priority = 1 WHERE id = 1;